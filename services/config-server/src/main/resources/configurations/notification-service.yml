spring:
    mail:
        host: ${MAIL_HOST}
        port: ${MAIL_PORT}
        username: ${EMAIL}
        password: ${EMAIL_PASSWORD}
        properties:
            mail:
                smtp:
                    auth: true
                    starttls:
                        enable: true
                    connectiontimeout: 5000
                    timeout: 3000
                    writetimeout: 5000

    data:
        mongodb:
            username: ${NOTIFICATION_SERVICE_MONGODB_USERNAME}
            password: ${NOTIFICATION_SERVICE_MONGODB_PASSWORD}
            host: ${NOTIFICATION_SERVICE_MONGODB_HOST}
            port: ${NOTIFICATION_SERVICE_MONGODB_PORT}
            database: ${NOTIFICATION_SERVICE_MONGODB_DATABASE}
            authentication-database: ${NOTIFICATION_SERVICE_MONGODB_AUTH_DB}
    kafka:
        consumer:
            bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
            key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
            value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
            properties:
                # Permite todos los eventos de consumers bajo este paquete base
                spring.json.trusted.packages: com.patientapp.notificationservice.kafka.consumer,com.patientapp.notificationservice.kafka.consumer.auth,com.patientapp.notificationservice.kafka.consumer.appointment
                # Mapeo de eventos a clases
                spring.json.type.mapping: userCreated:com.patientapp.notificationservice.kafka.consumer.auth.UserCreatedEvent,temporaryPassword:com.patientapp.notificationservice.kafka.consumer.auth.TemporaryPasswordEvent,appointmentCreated:com.patientapp.notificationservice.kafka.consumer.appointment.AppointmentCreatedEvent
            # Cada microservicio o tipo de evento puede tener su propio group id
            group-id: authGroup,appointmentGroup
            auto-offset-reset: earliest
server:
    port: ${NOTIFICATION_SERVICE_SERVER_PORT}